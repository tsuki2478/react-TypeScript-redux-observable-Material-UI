export var LOAD_START = 'video-react/LOAD_START';
export var CAN_PLAY = 'video-react/CAN_PLAY';
export var WAITING = 'video-react/WAITING';
export var CAN_PLAY_THROUGH = 'video-react/CAN_PLAY_THROUGH';
export var PLAYING = 'video-react/PLAYING';
export var PLAY = 'video-react/PLAY';
export var PAUSE = 'video-react/PAUSE';
export var END = 'video-react/END';
export var SEEKING = 'video-react/SEEKING';
export var SEEKED = 'video-react/SEEKED';
export var SEEKING_TIME = 'video-react/SEEKING_TIME';
export var END_SEEKING = 'video-react/END_SEEKING';
export var DURATION_CHANGE = 'video-react/DURATION_CHANGE';
export var TIME_UPDATE = 'video-react/TIME_UPDATE';
export var VOLUME_CHANGE = 'video-react/VOLUME_CHANGE';
export var PROGRESS_CHANGE = 'video-react/PROGRESS_CHANGE';
export var RATE_CHANGE = 'video-react/RATE_CHANGE';
export var SUSPEND = 'video-react/SUSPEND';
export var ABORT = 'video-react/ABORT';
export var EMPTIED = 'video-react/EMPTIED';
export var STALLED = 'video-react/STALLED';
export var LOADED_META_DATA = 'video-react/LOADED_META_DATA';
export var LOADED_DATA = 'video-react/LOADED_DATA';
export var RESIZE = 'video-react/RESIZE';
export var ERROR = 'video-react/ERROR';
export function handleLoadStart(videoProps) {
  return {
    type: LOAD_START,
    videoProps: videoProps
  };
}
export function handleCanPlay(videoProps) {
  return {
    type: CAN_PLAY,
    videoProps: videoProps
  };
}
export function handleWaiting(videoProps) {
  return {
    type: WAITING,
    videoProps: videoProps
  };
}
export function handleCanPlayThrough(videoProps) {
  return {
    type: CAN_PLAY_THROUGH,
    videoProps: videoProps
  };
}
export function handlePlaying(videoProps) {
  return {
    type: PLAYING,
    videoProps: videoProps
  };
}
export function handlePlay(videoProps) {
  return {
    type: PLAY,
    videoProps: videoProps
  };
}
export function handlePause(videoProps) {
  return {
    type: PAUSE,
    videoProps: videoProps
  };
}
export function handleEnd(videoProps) {
  return {
    type: END,
    videoProps: videoProps
  };
}
export function handleSeeking(videoProps) {
  return {
    type: SEEKING,
    videoProps: videoProps
  };
}
export function handleSeeked(videoProps) {
  return {
    type: SEEKED,
    videoProps: videoProps
  };
}
export function handleDurationChange(videoProps) {
  return {
    type: DURATION_CHANGE,
    videoProps: videoProps
  };
}
export function handleTimeUpdate(videoProps) {
  return {
    type: TIME_UPDATE,
    videoProps: videoProps
  };
}
export function handleVolumeChange(videoProps) {
  return {
    type: VOLUME_CHANGE,
    videoProps: videoProps
  };
}
export function handleProgressChange(videoProps) {
  return {
    type: PROGRESS_CHANGE,
    videoProps: videoProps
  };
}
export function handleRateChange(videoProps) {
  return {
    type: RATE_CHANGE,
    videoProps: videoProps
  };
}
export function handleSuspend(videoProps) {
  return {
    type: SUSPEND,
    videoProps: videoProps
  };
}
export function handleAbort(videoProps) {
  return {
    type: ABORT,
    videoProps: videoProps
  };
}
export function handleEmptied(videoProps) {
  return {
    type: EMPTIED,
    videoProps: videoProps
  };
}
export function handleStalled(videoProps) {
  return {
    type: STALLED,
    videoProps: videoProps
  };
}
export function handleLoadedMetaData(videoProps) {
  return {
    type: LOADED_META_DATA,
    videoProps: videoProps
  };
}
export function handleLoadedData(videoProps) {
  return {
    type: LOADED_DATA,
    videoProps: videoProps
  };
}
export function handleResize(videoProps) {
  return {
    type: RESIZE,
    videoProps: videoProps
  };
}
export function handleError(videoProps) {
  return {
    type: ERROR,
    videoProps: videoProps
  };
}
export function handleSeekingTime(time) {
  return {
    type: SEEKING_TIME,
    time: time
  };
}
export function handleEndSeeking(time) {
  return {
    type: END_SEEKING,
    time: time
  };
}