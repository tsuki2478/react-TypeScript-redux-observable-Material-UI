import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';
import ProgressControl from './ProgressControl';
import PlayToggle from './PlayToggle';
import ForwardControl from './ForwardControl';
import ReplayControl from './ReplayControl';
import FullscreenToggle from './FullscreenToggle';
import RemainingTimeDisplay from '../time-controls/RemainingTimeDisplay';
import CurrentTimeDisplay from '../time-controls/CurrentTimeDisplay';
import DurationDisplay from '../time-controls/DurationDisplay';
import TimeDivider from '../time-controls/TimeDivider';
import VolumeMenuButton from './VolumeMenuButton';
import PlaybackRateMenuButton from './PlaybackRateMenuButton';
import { mergeAndSortChildren } from '../../utils';
var propTypes = {
  children: PropTypes.any,
  autoHide: PropTypes.bool,
  disableDefaultControls: PropTypes.bool,
  disableCompletely: PropTypes.bool,
  className: PropTypes.string
};
var defaultProps = {
  autoHide: true,
  disableCompletely: false
};

var ControlBar =
/*#__PURE__*/
function (_Component) {
  _inherits(ControlBar, _Component);

  function ControlBar(props) {
    var _this;

    _classCallCheck(this, ControlBar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ControlBar).call(this, props));
    _this.getDefaultChildren = _this.getDefaultChildren.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getFullChildren = _this.getFullChildren.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(ControlBar, [{
    key: "getDefaultChildren",
    value: function getDefaultChildren() {
      return [React.createElement(PlayToggle, {
        key: "play-toggle",
        order: 1
      }), React.createElement(VolumeMenuButton, {
        key: "volume-menu-button",
        order: 4
      }), React.createElement(CurrentTimeDisplay, {
        key: "current-time-display",
        order: 5.1
      }), React.createElement(TimeDivider, {
        key: "time-divider",
        order: 5.2
      }), React.createElement(DurationDisplay, {
        key: "duration-display",
        order: 5.3
      }), React.createElement(ProgressControl, {
        key: "progress-control",
        order: 6
      }), React.createElement(FullscreenToggle, {
        key: "fullscreen-toggle",
        order: 8
      })];
    }
  }, {
    key: "getFullChildren",
    value: function getFullChildren() {
      return [React.createElement(PlayToggle, {
        key: "play-toggle",
        order: 1
      }), React.createElement(ReplayControl, {
        key: "replay-control",
        order: 2
      }), React.createElement(ForwardControl, {
        key: "forward-control",
        order: 3
      }), React.createElement(VolumeMenuButton, {
        key: "volume-menu-button",
        order: 4
      }), React.createElement(CurrentTimeDisplay, {
        key: "current-time-display",
        order: 5
      }), React.createElement(TimeDivider, {
        key: "time-divider",
        order: 6
      }), React.createElement(DurationDisplay, {
        key: "duration-display",
        order: 7
      }), React.createElement(ProgressControl, {
        key: "progress-control",
        order: 8
      }), React.createElement(RemainingTimeDisplay, {
        key: "remaining-time-display",
        order: 9
      }), React.createElement(PlaybackRateMenuButton, {
        rates: [1, 1.25, 1.5, 2],
        key: "playback-rate",
        order: 10
      }), React.createElement(FullscreenToggle, {
        key: "fullscreen-toggle",
        order: 11
      })];
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      var children = React.Children.toArray(this.props.children);
      var defaultChildren = this.props.disableDefaultControls ? [] : this.getDefaultChildren();

      var _this$props = this.props,
          className = _this$props.className,
          parentProps = _objectWithoutProperties(_this$props, ["className"]); // remove className


      return mergeAndSortChildren(defaultChildren, children, parentProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          autoHide = _this$props2.autoHide,
          className = _this$props2.className,
          disableCompletely = _this$props2.disableCompletely;
      var children = this.getChildren();
      return disableCompletely ? null : React.createElement("div", {
        className: classNames('video-react-control-bar', {
          'video-react-control-bar-auto-hide': autoHide
        }, className)
      }, children);
    }
  }]);

  return ControlBar;
}(Component);

export { ControlBar as default };
ControlBar.propTypes = propTypes;
ControlBar.defaultProps = defaultProps;
ControlBar.displayName = 'ControlBar';