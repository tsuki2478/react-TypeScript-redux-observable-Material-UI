import _objectSpread from "@babel/runtime/helpers/objectSpread";
import { LOAD_START, CAN_PLAY, WAITING, CAN_PLAY_THROUGH, PLAYING, PLAY, PAUSE, END, SEEKING, SEEKED, SEEKING_TIME, END_SEEKING, DURATION_CHANGE, TIME_UPDATE, VOLUME_CHANGE, PROGRESS_CHANGE, RATE_CHANGE, SUSPEND, ABORT, EMPTIED, STALLED, LOADED_META_DATA, LOADED_DATA, RESIZE, ERROR } from '../actions/video';
import { FULLSCREEN_CHANGE, PLAYER_ACTIVATE, USER_ACTIVATE } from '../actions/player';
var initialState = {
  currentSrc: null,
  duration: 0,
  currentTime: 0,
  seekingTime: 0,
  buffered: null,
  waiting: false,
  seeking: false,
  paused: true,
  autoPaused: false,
  ended: false,
  playbackRate: 1,
  muted: false,
  volume: 1,
  readyState: 0,
  networkState: 0,
  videoWidth: 0,
  videoHeight: 0,
  hasStarted: false,
  userActivity: true,
  isActive: false,
  isFullscreen: false
};
export default function player() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case USER_ACTIVATE:
      return _objectSpread({}, state, {
        userActivity: action.activity
      });

    case PLAYER_ACTIVATE:
      return _objectSpread({}, state, {
        isActive: action.activity
      });

    case FULLSCREEN_CHANGE:
      return _objectSpread({}, state, {
        isFullscreen: !!action.isFullscreen
      });

    case SEEKING_TIME:
      return _objectSpread({}, state, {
        seekingTime: action.time
      });

    case END_SEEKING:
      return _objectSpread({}, state, {
        seekingTime: 0
      });

    case LOAD_START:
      return _objectSpread({}, state, action.videoProps, {
        hasStarted: false,
        ended: false
      });

    case CAN_PLAY:
      return _objectSpread({}, state, action.videoProps, {
        waiting: false
      });

    case WAITING:
      return _objectSpread({}, state, action.videoProps, {
        waiting: true
      });

    case CAN_PLAY_THROUGH:
    case PLAYING:
      return _objectSpread({}, state, action.videoProps, {
        waiting: false
      });

    case PLAY:
      return _objectSpread({}, state, action.videoProps, {
        ended: false,
        paused: false,
        autoPaused: false,
        waiting: false,
        hasStarted: true
      });

    case PAUSE:
      return _objectSpread({}, state, action.videoProps, {
        paused: true
      });

    case END:
      return _objectSpread({}, state, action.videoProps, {
        ended: true
      });

    case SEEKING:
      return _objectSpread({}, state, action.videoProps, {
        seeking: true
      });

    case SEEKED:
      return _objectSpread({}, state, action.videoProps, {
        seeking: false
      });

    case ERROR:
      return _objectSpread({}, state, action.videoProps, {
        error: 'UNKNOWN ERROR',
        ended: true
      });

    case DURATION_CHANGE:
    case TIME_UPDATE:
    case VOLUME_CHANGE:
    case PROGRESS_CHANGE:
    case RATE_CHANGE:
    case SUSPEND:
    case ABORT:
    case EMPTIED:
    case STALLED:
    case LOADED_META_DATA:
    case LOADED_DATA:
    case RESIZE:
      return _objectSpread({}, state, action.videoProps, action.videoProps.paused === false ? {
        hasStarted: true,
        waiting: false
      } : {});

    default:
      return state;
  }
}